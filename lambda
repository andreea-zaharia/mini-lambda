#!/bin/sh

realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

cleanup() {
  rm -rf "$WORK_DIR"
}

usage() {
  echo "$0 [-o OUTPUT] input"
}

# Find the directory where the script is located.
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Infer the host architecture.
ARCH=`uname -m`

# Parse the arguments.
OUTPUT=""
INPUT=""
FLAGS=""
while : ; do
  case "$1" in
    "") break;;
    -h|\?)
        usage
        exit 0
        ;;
    -o)  OUTPUT="$2"
        shift
        ;;
    -dump-ir)
        FLAGS="$FLAGS $1"
        ;;
    *)  INPUT=`realpath $1`
        ;;
  esac
  shift
done

# Sanitize input
if [ -z $INPUT ]; then
  usage
  exit 1
fi

# Find the input file.
if test -f "$INPUT"; then
  # Compile the file.
  case "$OUTPUT" in
    "")
      # Dump assembly to stdout.
      (cd $DIR; dune exec ./main.exe -- -$ARCH $INPUT $FLAGS)
      ;;
    *)
      # Create a temporary directory.
      WORK_DIR=`mktemp -d`

      (cd $DIR; dune exec ./main.exe -- -$ARCH $INPUT $FLAGS -o $WORK_DIR/lambda.S)
      gcc -c runtime_x86_64.S -o $WORK_DIR/runtime.o
      gcc $WORK_DIR/runtime.o $WORK_DIR/lambda.S -o $OUTPUT

      # Link with runtime into a binary.
      trap cleanup EXIT
      ;;
  esac
else
  echo "File does not exist: $INPUT"
fi
